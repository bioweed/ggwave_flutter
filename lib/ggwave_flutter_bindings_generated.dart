// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/ggwave_flutter.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class GgwaveFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GgwaveFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GgwaveFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  void initNative() {
    return _initNative();
  }

  late final _initNativePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('initNative');
  late final _initNative = _initNativePtr.asFunction<void Function()>();

  int convertDataToAudio(
    ffi.Pointer<ffi.Int8> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out,
    int protocolID,
  ) {
    return _convertDataToAudio(
      dataBuffer,
      dataSize,
      out,
      protocolID,
    );
  }

  late final _convertDataToAudioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32)>>('convertDataToAudio');
  late final _convertDataToAudio = _convertDataToAudioPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int processCaptureData(
    ffi.Pointer<ffi.Int8> dataBuffer,
    int dataSize,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out,
  ) {
    return _processCaptureData(
      dataBuffer,
      dataSize,
      out,
    );
  }

  late final _processCaptureDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('processCaptureData');
  late final _processCaptureData = _processCaptureDataPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  void setRxProtocolID(
    int protocolID,
  ) {
    return _setRxProtocolID(
      protocolID,
    );
  }

  late final _setRxProtocolIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'setRxProtocolID');
  late final _setRxProtocolID =
      _setRxProtocolIDPtr.asFunction<void Function(int)>();
}
